displayName: kubewarden-controller
description: A Helm chart for deploying the Kubewarden stack
category:
- artifact-hub
type: catalog
allowMultipleInstances: false
scope:
- workspace
licensing:
- Ultimate
- Enterprise
certifications:
overview: |
    # kubewarden-controller
    
    `kubewarden-controller` is a Kubernetes controller that allows you to
    dynamically register Kubewarden admission policies.
    
    The `kubewarden-controller` will reconcile the admission policies you
    have registered against the Kubernetes webhooks of the cluster where
    it is deployed.
    
    The kubewarden-controller can be deployed using a helm chart.
    
    ## Installing the charts
    
    If you want to enable telemetry, you also need to install [OpenTelemetry Operator](https://github.com/open-telemetry/opentelemetry-operator).
    
    For example:
    ```console
    $ helm repo add kubewarden https://charts.kubewarden.io
    $ helm install --create-namespace -n kubewarden kubewarden-crds kubewarden/kubewarden-crds
    $ helm install --wait -n kubewarden kubewarden-controller kubewarden/kubewarden-controller
    $ helm install --wait -n kubewarden kubewarden-defaults kubewarden/kubewarden-defaults
    ```
    
    This will install kubewarden-crds, kubewarden-controller, and a
    default PolicyServer on the Kubernetes cluster in the default configuration
    (which includes self-signed TLS certs).
    
    The default configuration values should be good enough for the majority of
    deployments. All the options are documented in the configuration section.
    
    ## Upgrading the charts
    
    Please refer to the release notes of each version of the helm charts.
    These can be found [here](https://github.com/kubewarden/helm-charts/releases).
    
    ## Uninstalling the charts
    
    To uninstall/delete kubewarden-controller and kubewarden-crds use the following
    command:
    
    ```console
    $ helm uninstall -n kubewarden kubewarden-defaults
    $ helm uninstall -n kubewarden kubewarden-controller
    $ helm uninstall -n kubewarden kubewarden-crds
    ```
    
    The commands remove all the Kubernetes components associated with the chart, all
    policy servers and their policies, and deletes the release along with the release
    history.
    
    If you want to keep the history use `--keep-history` flag.
    
    ## Configuration
    
    See the `values.yaml` file of the chart for the configuration values.
    
    For the default PolicyServer configuration, Check the `kubewarden-defaults`
    chart and its documentation.
    
    # Kubewarden usage
    
    Once the kubewarden-controller is up and running, Kubewarden policies can be
    defined via the `ClusterAdmissionPolicy` resource.
    
    The documentation of this Custom Resource can be found
    [here](https://github.com/kubewarden/kubewarden-controller/blob/main/docs/crds/README.asciidoc)
    or on [docs.crds.dev](https://doc.crds.dev/github.com/kubewarden/kubewarden-controller).
    
    **Note well:** `ClusterAdmissionPolicy` resources are cluster-wide.
    
    ### Deploy your first admission policy
    
    The following snippet defines a Kubewarden Policy based on the
    [pod-privileged](https://github.com/kubewarden/pod-privileged-policy)
    policy:
    
    ```yaml
    kubectl apply -f - <<EOF
    ---
    apiVersion: policies.kubewarden.io/v1alpha2
    kind: ClusterAdmissionPolicy
    metadata:
      name: privileged-pods
    spec:
      policyServer: default
      module: registry://ghcr.io/kubewarden/policies/pod-privileged:v0.1.9
      rules:
        - apiGroups: [""]
          apiVersions: ["v1"]
          resources: ["pods"]
          operations:
            - CREATE
            - UPDATE
      mutating: false
    EOF
    ```
    
    **Note well**: The `ClusterAdmissionPolicy` is deployed in the `default` PolicyServer.
    Which is installed in the `kubewarden-defaults` chart. If you do not install
    the chart, you should deploy a PolicyServer first. Check out the
    [documentation](https://docs.kubewarden.io/quick-start.html#policy-server) for more details
    
    Let's try to create a Pod with no privileged containers:
    
    ```shell
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: Pod
    metadata:
      name: unprivileged-pod
    spec:
      containers:
        - name: nginx
          image: nginx:latest
    EOF
    ```
    
    This will produce the following output, which means the Pod was successfully
    created:
    
    `pod/unprivileged-pod created`
    
    Now, let's try to create a pod with at least one privileged container:
    
    ```shell
    kubectl apply -f - <<EOF
    apiVersion: v1
    kind: Pod
    metadata:
      name: privileged-pod
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          securityContext:
            privileged: true
    EOF
    ```
    
    This time the creation of the Pod will be blocked, with the following message:
    
    ```
    Error from server: error when creating "STDIN": admission webhook "privileged-pods.kubewarden.admission" denied the request: User 'minikube-user' cannot schedule privileged containers
    ```
    
    ### Remove your first admission policy
    
    You can delete the admission policy you just created:
    
    ```console
    $ kubectl delete clusteradmissionpolicy privileged-pods
    ```
    
icon: PHN2ZyBpZD0iTGF5ZXJfMSIgZGF0YS1uYW1lPSJMYXllciAxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAyMDAgMTY1Ij48ZGVmcz48c3R5bGU+LmNscy0xe2ZpbGw6I2JjMmE0Njt9LmNscy0ye2ZpbGw6I2ZmZjt9PC9zdHlsZT48L2RlZnM+PHJlY3QgY2xhc3M9ImNscy0xIiB3aWR0aD0iMjAwIiBoZWlnaHQ9IjE2NSIgcng9IjIwLjI5MzUzIi8+PHBhdGggY2xhc3M9ImNscy0yIiBkPSJNMTAwLDY4LjYyMzU0bDExLjQxNDE5LDUuNDk2ODIsMi44MTkwOSwxMi4zNTEwOC03Ljg5ODkzLDkuOTA1SDkzLjY2NTYybC03Ljg5ODgtOS45MDUsMi44MTkwOS0xMi4zNTEwOEwxMDAsNjguNjIzNTRtMC04LjQ3OUw5Ni42ODU0LDYxLjc0MDcyLDg1LjI3MTMzLDY3LjIzNzU1bC0zLjMxNDU3LDEuNTk2MTktLjgxODYsMy41ODY2Ny0yLjgxOTEsMTIuMzUxMDctLjgxODYsMy41ODY2NywyLjI5MzcsMi44NzYyMyw3Ljg5ODgsOS45MDUsMi4yOTM3MSwyLjg3NjIyaDIwLjAyNjQ5bDIuMjkzODItMi44NzYyMiw3Ljg5ODkyLTkuOTA1LDIuMjkzNzEtMi44NzYyMy0uODE4NjEtMy41ODY2Ny0yLjgxOTA5LTEyLjM1MTA3LS44MTg2LTMuNTg2NjctMy4zMTQ1OC0xLjU5NjE5LTExLjQxNDE4LTUuNDk2ODNMMTAwLDYwLjE0NDUzWiIvPjxwYXRoIGNsYXNzPSJjbHMtMiIgZD0iTTEwMC4wMDAwOSwzOS45MjA5bDMxLjU2MTE2LDE1LjMxOTgydjM4LjI3NzFjMCwxNy40MzA2Ny0zMS41NjExNiwzMS41NjEyOC0zMS41NjExNiwzMS41NjEyOHMtMzEuNTYxNC0xNC4xMzA2MS0zMS41NjE0LTMxLjU2MTI4VjU1LjI0MDcybDMxLjU2MTQtMTUuMzE5ODJtMC0xNi42NzM1OS02LjU1MDE3LDMuMTc5Mkw2MS44ODg1Miw0MS43NDYzNCw1My40Mzg2OSw0NS44NDc5VjkzLjUxNzgyYzAsMTIuMzExMjgsNy4zOTY4NSwyMy45MDgsMjEuOTg1MjMsMzQuNDY3NzhhMTEzLjYyOTg1LDExMy42Mjk4NSwwLDAsMCwxOC40NDY2NiwxMC43ODM5M2w2LjEyOTUxLDIuNzQ0MzksNi4xMjk1Mi0yLjc0NDM5YTExMy42MzEzOSwxMTMuNjMxMzksMCwwLDAsMTguNDQ2NTMtMTAuNzgzOTNjMTQuNTg4MjYtMTAuNTU5ODIsMjEuOTg1MTEtMjIuMTU2NSwyMS45ODUxMS0zNC40Njc3OFY0NS44NDc5bC04LjQ0OTgzLTQuMTAxNTZMMTA2LjU1MDI2LDI2LjQyNjUxbC02LjU1MDE3LTMuMTc5MloiLz48L3N2Zz4=